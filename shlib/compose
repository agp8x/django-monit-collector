#!/bin/sh

RUN=docker-compose.yml

function monitcollector() {
cat <<-EOF
  monitcollector:
    build:
      context: ./src
      dockerfile: Dockerfile.${ARCH}
    image: monitcollector
    volumes:
      - ./src:/usr/src/app
EOF
}

function monit() {
  cat <<-EOF
  monit:
    build:
      context: ./monit
      dockerfile: Dockerfile.${ARCH}
    image: monit
    privileged: True
    network_mode: "host"
    volumes:
      - ./monit/basic:/etc/monit/monitrc.d/basic
EOF
}

function deployyml() {
  local RUN=$1
cat<<-EOF > "${RUN}"
version: '2'

volumes:
  static:
    driver: local

networks:
  backend:
    driver: bridge
  internal:
    driver: bridge

services:
  db:
    build:
      context: ./postgres
      dockerfile: Dockerfile.${ARCH}
    image: postgres
    restart: always
    expose:
      - 5432
    networks:
      - internal
    environment:
      - POSTGRES_DB=pymonit

$(monitcollector)
      - static:/usr/src/app/static
    depends_on:
      - db
    environment:
      - DECOUPLE_DB=postgresql://postgres:postgres@db/pymonit
      - LISTEN_PORT=8000
    expose:
      - 8000
    networks:
      - internal

$(monit)
    environment:
      - MMONIT_URL=http://localhost/monitcollector/collector

  caddy:
    build:
      context: ./caddy
      dockerfile: Dockerfile.${ARCH}
    image: caddy
    restart: always
    networks:
      - internal
      - backend
    volumes:
      - static:/var/www/html/static
      - ./caddy/Caddyfile:/etc/Caddyfile
    ports:
      - "80:80"
EOF
}

function developyml() {
  local RUN=$1

cat<<-EOF > "${RUN}"
version: '2'

volumes:
  sqlitedb:
    driver: local

services:
$(monitcollector)
      - sqlitedb:/usr/src/app/data
    environment:
      - LISTEN_PORT=8000
    ports:
      - "8000:8000"
    entrypoint: /pythonstart.sh

$(monit)
    environment:
      - MMONIT_URL=http://localhost:8000/monitcollector/collector
EOF
}

function start() {
  local yml="$1"
  local simple="$2"
  local created="$3"
  local orgdir="${PWD##*/}"
  local dir="${orgdir//[-]/}"
  local service=monitcollector
  local name="${dir}_${service}_1"

  if [[ "$simple" == "false" ]]; then
    waitedSleep "PostgreSQL init process complete; ready for start up" "db" "${yml}"
  fi
  waitedSleep "static files copied" "${service}" "${yml}"
  docker-compose -f ${yml} up -d

  if [[ "$created" == "true" ]]; then
    echo "Setting up ${name}"
    docker exec -it ${name} python manage.py createsuperuser --username "admin" --email "admin@example.com"
  fi
  echo "To stop the container again execute"
  echo "docker-compose down -v"
}

function waitedSleep() {
  local finished="$1"
  local service="$2"
  local yml="$3"
  local seconds=1

  docker-compose -f "${yml}" up -d "${service}"
  while true; do
    docker-compose -f "${yml}" logs "${service}" | grep "${finished}" &> /dev/null
    if [ $? == 0 ]; then
      break
    else
      waiting "${seconds}" "for "${service}" to be ready\e[0m"
      seconds=$((seconds+1))
    fi
  done
}
