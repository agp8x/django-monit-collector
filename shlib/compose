#!/bin/sh

RUN=docker-compose.yml
PLOT=r-docker-compose.yml

function monitcollector() {
  local src="./src"
  python_dockerfile Dockerfile.generic Dockerfile ${src}
cat <<-EOF
  monitcollector:
    build:
      context: ${src}
      dockerfile: Dockerfile
    image: monitcollector
    volumes:
      - ./src:/usr/src/app
EOF
}

function monitcollector_env(){
cat <<-EOF
    environment:
      - ADMIN=${ADMIN}
      - ADMIN_PWD=${PASSWD}
      - EMAIL=${EMAIL}
EOF
}

function monit() {
  local src="./monit"
  alpine_dockerfile Dockerfile.generic Dockerfile ${src}
  cat <<-EOF
  monit:
    build:
      context: ${src}
      dockerfile: Dockerfile
    image: monit
    privileged: True
    network_mode: "host"
    volumes:
      - ./monit/monitrc.d/basic:/etc/monit/monitrc.d/basic
      - /var/run/docker.sock:/var/run/docker.sock
EOF
}

function deployyml() {
  local RUN="${1}"
  local db="./postgres"
  alpine_dockerfile Dockerfile.generic Dockerfile ${db}
  local caddy="./caddy"
  alpine_dockerfile Dockerfile.generic Dockerfile ${caddy}
cat<<-EOF > "${RUN}"
version: '3'

volumes:
  static:
    driver: local
  pgdata:
    driver: local

networks:
  backend:
    driver: bridge
  internal:
    driver: bridge

services:
  db:
    build:
      context: ${db}
      dockerfile: Dockerfile
    image: postgres
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - internal
    environment:
      - POSTGRES_DB=pymonit

$(monitcollector)
      - static:/usr/src/app/static
    depends_on:
      - db
$(monitcollector_env)
      - DECOUPLE_DB=postgresql://postgres:postgres@db/pymonit
      - LISTEN_PORT=8000
    expose:
      - 8000
    networks:
      - internal
    entrypoint: ["tini", "--", "dockerize", "-wait", "tcp://db:5432", "-timeout", "3600s", "gunicornup.sh"]

$(monit)
    environment:
      - MMONIT_URL=http://localhost/monitcollector/collector
    entrypoint: ["tini", "--", "dockerize", "-wait", "http://localhost", "-timeout", "3600s", "bash","-c","/docker-entrypoint"]

  caddy:
    build:
      context: ${caddy}
      dockerfile: Dockerfile
    image: caddy
    restart: always
    networks:
      - internal
      - backend
    volumes:
      - static:/var/www/html/static
      - ./caddy/Caddyfile:/home/caddy/Caddyfile
    ports:
      - "80:80"
EOF
}

function ryml() {
  local plot="${1:-${PLOT}}"
cat<<-EOF > "${plot}"
version: '3'

services:
  rplots:
    build:
      context: ./Rplots
      dockerfile: Dockerfile
    image: rplots
    networks:
      - internal
    volumes:
      - ./Rplots/src:/src
      - ./Rplots/plots:/plots
    entrypoint: ["R", "CMD", "BATCH", "postgres.r"]
EOF
}

function developyml() {
  local RUN="${1}"

cat<<-EOF > "${RUN}"
version: '3'

volumes:
  sqlitedb:
    driver: local

services:
$(monitcollector)
      - sqlitedb:/data
    environment:
      - LISTEN_PORT=8000
    ports:
      - "8000:8000"

$(monit)
    environment:
      - MMONIT_URL=http://localhost:8000/monitcollector/collector
    entrypoint: ["tini", "--", "dockerize", "-wait", "http://localhost:8000", "-timeout", "300s", "bash","-c","/docker-entrypoint"]

EOF
}


function start() {
  local yml="${1}"
  local created="${2}"
  #local orgdir="${PWD##*/}"
  #local dir="${orgdir//[-]/}"
  #local service=monitcollector
  #local name="${dir}_${service}_1"

  if [[ "$created" == "true" ]]; then
    docker-compose -f "${yml}" up --force-recreate --build -d
  else
    docker-compose -f "${yml}" up -d
  fi

  info "To stop the container again execute"
  info "docker-compose down -v"
}

function plot() {
  local yml="${1}"
  local plot="${2}"

  docker-compose -f "${yml}" -f "${plot}" run rplots
}
